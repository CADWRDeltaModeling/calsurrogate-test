! THIS Code CONTAINS THE X2 STANDARD MODELING IN CALSIM
! X2 DAYS WITH FLOW-WEIGHTING PROCEDURE IS USED AS IN DWRSIM

! X2 is the 2ppt bottom isohaline line used to describe the entrapment zone.  ANN is used to compute the
! position as a function of last month's position and current month's Net Delta outflow
include[local] '..\..\Ann\AnnCommon3.wresl'


! calculate previous month's value of X2. This is not specific
define X2_Month_sv {
      value  surrogateX2(NDO(-1:-5),
                         SMSCG_OP(-1:-5),
                         30, 
                         int(monthly_ave), calmonth_prev, calyear_prev,0.) 
}

define X2_Month {lower -999999 upper 999999 kind 'X2-POSITION-PREV' units 'KM'}
goal setX2Monprv {X2_Month = X2_Month_sv}



! ******************************************************************************************
! Set the begin and end day for the standard -- Roe always met first
define begday_roe {
     case StandardOn {
          condition      daysX2_roe_mod > 0.5
          value    1. }
     case StandardOff {
          condition      always
          value    0. }
}
define endday_roe {
     case StandardOn {
          condition      daysX2_roe_mod > 0.5
          value    begday_roe + daysX2_roe_mod - 1. }
     case StandardOff {
          condition      always
          value    0. }
}
define begday_roedv {alias begday_roe kind 'debug' units 'none'}
define endday_roedv {alias endday_roe kind 'debug' units 'none'}

! Now compute the Delta outflow required to meet the Roe standard
define DO_req_X2roe_init {
     case StandardOn {
          condition     daysX2_chs_mod > 0.5
          value max(0.,requiredFlowX2(km_roe, daysX2_roe_mod, 
          	          NDO(-1:-4), -9999., 
		              SMSCG_OP(-1:-4), SMSCG_OPSV, 
		              3000., 30000., 30, 77,    ! */ x2 station code = 30 nth_lowest agg code = 77 
		              calmonth, calyear))
		         }
  case other {
  	condition always
  	value 0.0}
}

define DO_req_X2roe_nocap {
     case StandardOn {
          condition     daysX2_roe_mod > 0.5
          value         DO_req_X2roe_init}
     case StandardOff {
          condition      always
          value          0.0  }
}
define DO_req_X2roe_nocap_dv {alias DO_req_X2chs_nocap kind 'FLOW' units 'CFS'}
define DO_req_X2roe {value min(flowcap_roe, DO_req_X2roe_nocap)}


! calculate and report previous ndays value of x2 west of station
define X2_roe_nday_sv {
      value  surrogateX2(NDO(-1:-5),
                         SMSCG_OP(-1:-5),
                         30, 
                         99, calmonth_prev, calyear_prev, km_roe) ! 99 = COUNTBELOW, km_roe is threshold
}

define X2_roe_nday {lower -999999 upper 999999 kind 'X2-POSITION-PREV' units 'KM'}
goal setX2NDayroe {X2_roe_nday = X2_roe_nday_sv}

define X2_std_roe_modnday {lower -999999 upper 999999 kind 'X2-NDAY' units 'DAYS'}
goal setX2NDayStdroe {X2_std_roe_modnday = daysX2_roe_mod}










! ******************************************************************************************
! Set the begin and end day for the standard -- Chipps always met second
define begday_chs {
     case StandardOn {
          condition      daysX2_chs_mod > 0.5
          value    endday_roe + 1. }
     case StandardOff {
          condition      always
          value    0. }
}
define endday_chs {
     case StandardOn {
          condition      daysX2_chs_mod > 0.5
          value    begday_chs + daysX2_chs_mod - 1. }
     case StandardOff {
          condition      always
          value    0. }
}
define begday_chsdv {alias begday_chs kind 'debug' units 'none'}
define endday_chsdv {alias endday_chs kind 'debug' units 'none'}

! Now compute the Delta outflow required to meet the Chipps standard
define DO_req_X2chs_init {
     case StandardOn {
          condition     daysX2_chs_mod > 0.5
          value max(0.,requiredFlowX2(km_chs, daysX2_chs_mod, 
          	          NDO(-1:-4), -9999., 
		              SMSCG_OP(-1:-4), SMSCG_OPSV, 
		              3000., 30000., 30, 77,    ! */ x2 station code = 30 nth_lowest agg code = 77 
		              calmonth, calyear))
		         }
  case other {
  	condition always
  	value 0.0}
  	
  	}
define DO_req_X2chs_nocap {
     case StandardOn {
          condition     daysX2_chs_mod > 0.5
          value         DO_req_X2chs_init}
     case StandardOff {
          condition      always
          value          0.0  }
}

define DO_req_X2chs_nocap_dv {alias DO_req_X2chs_init kind 'FLOW' units 'CFS'}
define DO_req_X2chs {value min(flowcap_chs, DO_req_X2chs_nocap)}





! calculate previous ndays value of x2 west of station
define X2_NDaychs_sv {
      value  surrogateX2(NDO(-1:-5),
                         SMSCG_OP(-1:-5),
                         30, 
                         99, calmonth_prev, calyear_prev, km_chs) ! 99 = COUNTBELOW, km_chs is threshold
}

define X2_chs_nday {lower -999999 upper 999999 kind 'X2-POSITION-PREV' units 'KM'}
goal setX2NDaychs {X2_chs_nday = X2_NDaychs_sv}

define X2_std_chs_modnday {lower -999999 upper 999999 kind 'X2-NDAY' units 'DAYS'}
goal setX2NDayStdchs {X2_std_chs_modnday = daysX2_chs_mod}


! ******************************************************************************************
! Set the begin and end day for the standard -- Confluence always met last
define begday_bkg {
     case background {
          condition daysX2_bkg_mod > 0.5
          value    1. }
     case None {
          condition always
          value    0. }
}
define endday_bkg {
     case background {
          condition daysX2_bkg_mod > 0.5
          value    begday_bkg + daysX2_bkg_mod - 1. }
     case None {
          condition always
          value    0. }
}
define begday_cnf {
     case StandardNone {
          condition      daysX2_cnf < 0.5
          value    0. }
     case PA_SmeltAug {
          condition      daysX2_cnf > 0.5 .and. month == AUG
          value    endday_bkg + 1. }
     case StandardOn {
          condition      daysX2_cnf_mod > 0.5
          value    endday_chs + 1. }
     case StandardOff {
          condition      always
          value    0. }
}
define endday_cnf {
     case StandardNone {
          condition      daysX2_cnf < 0.5
          value    0. }
     case StandardOn {
          condition      daysX2_cnf_mod > 0.5
          value   begday_cnf + daysX2_cnf_mod - 1. }
     case StandardOff {
          condition      always
          value    0. }
}
define begday_cnfdv {alias begday_cnf kind 'debug' units 'none'}
define endday_cnfdv {alias endday_cnf kind 'debug' units 'none'}

! Now compute the Delta outflow required to meet the Confluence standard
define km_cnf_mod {
     case WQCP {
          condition  daysX2_cnf_mod > 0.5 .and. month>=FEB .and. month<=JUN
          value km_cnf }
     case PA_SmeltAug {
          condition  daysX2_cnf_mod > 0.5 .and. month==AUG .and. wyt_Sac<=2
          value km_Aug }
     case PA_SmeltSept {
          condition  daysX2_cnf_mod > 0.5 .and. month==SEP .and. wyt_Sac<=2
          value km_PA }
     case PA_SmeltOct {
          condition      daysX2_cnf_mod > 0.5 .and. month==OCT .and. wyt_Sac<=2
          value km_PA}
     case StandardOff {
          condition      always
          value          120.0  }
}

define DO_req_X2cnf_init {
     case StandardOn {
          condition     km_cnf_mod > 0.5
          value max(0.,requiredFlowX2(km_cnf_mod, daysX2_chs_mod, 
          	          NDO(-1:-4), -9999., 
		              SMSCG_OP(-1:-4), SMSCG_OPSV, 
		              3000., 30000., 30, 77,    ! */ x2 station code = 30 nth_lowest agg code = 77 
		              calmonth, calyear))
		         }
     case SpecFlowStd {
         condition       daysX2_cnf < 0.5
         value           flowmin_specX2 }
     case StandardOff {
         condition       always
         value           0.0  }   }
         
define DO_req_X2cnf_nocap {
     case StandardOn {
          condition     daysX2_cnf_mod > 0.5
          value         DO_req_X2cnf_init}
     case StandardOff {
          condition      always
          value          0.0  }
}		 
define DO_req_X2cnf {
     case PA_SmeltAugSep {
          condition month>=AUG .and. wyt_Sac<=2 
          value     DO_req_X2cnf_nocap}
     case PA_SmeltOct {
          condition month==OCT .and. wyt_Sac<=2 
          value     DO_req_X2cnf_nocap}
     case WQCP {
          condition always
          value     min(flowcap_cnf, DO_req_X2cnf_nocap)}
}



! report previous ndays value of x2 west of station
define X2_cnf_nday_sv {
      value  surrogateX2(NDO(-1:-5),
                         SMSCG_OP(-1:-5),
                         30, 
                         99, calmonth_prev, calyear_prev, km_cnf) ! 99 = COUNTBELOW, km_cnf is threshold
}

define X2_cnf_nday {lower -999999 upper 999999 kind 'X2-POSITION-PREV' units 'KM'}
goal setX2NDaycnf {X2_cnf_nday = X2_cnf_nday_sv}

define X2_std_cnf_modnday {lower -999999 upper 999999 kind 'X2-NDAY' units 'DAYS'}
goal setX2NDayStdcnf {X2_std_cnf_modnday = daysX2_cnf_mod}







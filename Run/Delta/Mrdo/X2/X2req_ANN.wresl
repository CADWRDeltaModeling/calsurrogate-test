! THIS Code CONTAINS THE X2 STANDARD MODELING IN CALSIM
! X2 DAYS WITH FLOW-WEIGHTING PROCEDURE IS USED AS IN DWRSIM

! X2 is the 2ppt bottom isohaline line used to describe the entrapment zone.  ANN is used to compute the
! position as a function of last month's position and current month's Net Delta outflow
include[local] '..\..\Ann\AnnCommon3.wresl'

!***** Eliminated code hardwiring which days would be at what X2 - eli


! Now compute the Delta outflow required to meet the Roe standard
define DO_req_X2roe_init {
     case StandardOn {
          condition     daysX2_roe_mod > 0.5
          value max(0.,requiredFlowX2(km_roe, daysX2_roe_mod, 
          	          NDO(-1:-4), -9999., 
		              SMSCG_OP(-1:-4), SMSCG_OPSV, 
		              3000., 30000., 30, 77,    ! */ x2 station code = 30 nth_lowest agg code = 77 
		              calmonth, calyear))
		         }
  case other {
  	condition always
  	value 0.0}
}

! Store the above value as the flow needed in absense of a cap. It will be adjusted for the cap later
define DO_req_X2roe_nocap {
     case StandardOn {
          condition     daysX2_roe_mod > 0.5
          value         DO_req_X2roe_init}
     case StandardOff {
          condition      always
          value          0.0  }
}
define DO_req_X2roe_nocap_dv {alias DO_req_X2chs_nocap kind 'FLOW' units 'CFS'}
define DO_req_X2roe {value min(flowcap_roe, DO_req_X2roe_nocap)}


! calculate and report previous ndays value of x2 west of station
define X2_roe_nday_prev_sv {
      value  surrogateX2(NDO(-2:-5),NDO(-1),
                         SMSCG_OP(-2:-5),SMSCG_OP(-1),
                         30, 
                         99, calmonth_prev, calyear_prev, km_roe) ! 99 = COUNTBELOW, km_roe is threshold
}


define X2_roe_nday_prev {lower -999999 upper 999999 kind 'X2-NDAY' units 'DAYS'}
goal setX2NDayStdroe {X2_roe_nday_prev = X2_roe_nday_prev_sv}




! Now compute the Delta outflow required to meet the Chipps standard
define DO_req_X2chs_init {
     case StandardOn {
          condition     daysX2_chs_mod > 0.5
          value max(0.,requiredFlowX2(km_chs, daysX2_chs_mod, 
          	          NDO(-1:-4), -9999., 
		              SMSCG_OP(-1:-4), SMSCG_OPSV, 
		              3000., 30000., 30, 77,    ! */ x2 station code = 30 nth_lowest agg code = 77 
		              calmonth, calyear))
		         }
  case other {
  	condition always
  	value 0.0}
  	
  	}
define DO_req_X2chs_nocap {
     case StandardOn {
          condition     daysX2_chs_mod > 0.5
          value         DO_req_X2chs_init}
     case StandardOff {
          condition      always
          value          0.0  }
}

define DO_req_X2chs_nocap_dv {alias DO_req_X2chs_init kind 'FLOW' units 'CFS'}
define DO_req_X2chs {value min(flowcap_chs, DO_req_X2chs_nocap)}


! calculate previous ndays value of x2 west of station
define X2_chs_nday_prev_sv {
      value  surrogateX2(NDO(-2:-5),NDO(-1),
                         SMSCG_OP(-2:-5),SMSCG_OP(-1),
                         30, 
                         99, calmonth_prev, calyear_prev, km_chs) ! 99 = COUNTBELOW, km_chs is threshold
}

define X2_chs_nday_prev {lower -999999 upper 999999 kind 'X2-NDAY' units 'DAYS'}
goal setX2NDaychs {X2_chs_nday_prev = X2_chs_nday_prev_sv}





! Now compute the Delta outflow required to meet the Confluence standard
define km_cnf_mod {
     case WQCP {
          condition  daysX2_cnf_mod > 0.5 .and. month>=FEB .and. month<=JUN
          value km_cnf }
     case PA_SmeltAug {
          condition  daysX2_cnf_mod > 0.5 .and. month==AUG .and. wyt_Sac<=2
          value km_Aug }
     case PA_SmeltSept {
          condition  daysX2_cnf_mod > 0.5 .and. month==SEP .and. wyt_Sac<=2 
          value km_PA }
     case PA_SmeltOct {
          condition      daysX2_cnf_mod > 0.5 .and. month==OCT .and. wyt_Sac<=2 
          value km_PA}
     case PA_FlowMin {   ! This is a magic number flow minimum imposed for conditions when there is no regulation
     	  condition daysX2_cnf < 0.5
          value -0.5}
     case StandardOff {  ! A further fallback was in the original code. Unclear why this would be reached -ea 
          condition      always
          value          120.0  }
}

define km_cnf_mod_ {alias km_cnf_mod kind 'X2_KM' units 'KM'}

define DO_req_X2cnf_init {
	 ! August is transitional, not a standard. The goal is to enter September near the Confluence km
	 ! The daysX2_cnf_mod was previously set to 14 representing partial compliance and it may have gotten tacked
	 ! onto the end of the month (?) 
	 ! In that spirit, here we re-interpret the 14 as the length of the 
	 ! average at the end of the month over which we want to meet the km_cnf_mod goal
	 case PA_SmeltAug {
	 	condition month==AUG .and. wyt_Sac<=3.1 .and.  km_cnf_mod > 0.5  .and. km_cnf_mod < 110.
	 	value max(0.,requiredFlowX2(km_cnf_mod, daysX2_cnf_mod, 
          	          NDO(-1:-4), -9999., 
		              SMSCG_OP(-1:-4), SMSCG_OPSV, 
		              3000., 30000., 30, 9,    ! */ x2 station code = 30 last 7 average is code 9
		              calmonth, calyear))
		         }
	 case PA_SmeltSepOct {
	    ! The PA Fall X2 is in terms of monthly averaged, the "ndays" should be daysin but being under
	    ! for every day is much more severe than complying with an average. 
	 	condition range(month,SEP,OCT) .and. wyt_Sac<=3.1 .and. km_cnf_mod > 0.5 .and. km_cnf_mod < 110.
	 	value max(0.,requiredFlowX2(km_cnf_mod, daysX2_cnf_mod, 
          	          NDO(-1:-4), -9999., 
		              SMSCG_OP(-1:-4), SMSCG_OPSV, 
		              3000., 30000., 30, monthly_ave,    ! */ x2 station code = 30 nth_lowest agg code = 77 
		              calmonth, calyear))
		         }
	 case StandardOn{
	    ! The usual spring case using ndays
          condition     km_cnf_mod > 0.5  .and. km_cnf_mod < 110.
          value max(0.,requiredFlowX2(km_cnf_mod, daysX2_cnf_mod, 
          	          NDO(-1:-4), -9999., 
		              SMSCG_OP(-1:-4), SMSCG_OPSV, 
		              3000., 30000., 30, monthly_ave,    ! */ x2 station code = 30 nth_lowest agg code = 77 
		              calmonth, calyear))
		              }
     case SpecFlowStd {
         condition       daysX2_cnf < 0.5
         value           flowmin_specX2 }        ! Replacement flow periods (e.g. spring) when no standard
     case StandardOff {
         condition       always
         value           0.0  }   }
         
define DO_req_X2cnf_nocap {
     case StandardOn {
          condition     daysX2_cnf_mod > 0.5
          value         DO_req_X2cnf_init}
     case StandardOff {
          condition      always
          value          0.0  }
}		 
define DO_req_X2cnf {
     case PA_SmeltAugSep {
          condition month>=AUG .and. wyt_Sac<=2 
          value     DO_req_X2cnf_nocap}
     case PA_SmeltOct {
          condition month==OCT .and. wyt_Sac<=2 
          value     DO_req_X2cnf_nocap}
     case WQCP {
          condition always
          value     min(flowcap_cnf, DO_req_X2cnf_nocap)}
}


! diagnostic: projected ndays based on previous months and estimates from this cycle
define NDO_nominal{
  case controlfirstcycle{
    condition cyclenum == cn_GW_INITIAL
    value NDO(-1)
  }
  case control{
  	condition always
  	value NDO[-1]
  }
}

define X2_cnf_nday_proj_sv {
	  case StandardOn {
      condition km_cnf_mod > 0.5  .and. km_cnf_mod < 110.
      value  surrogateX2(NDO(-1:-4),NDO_nominal,
                         SMSCG_OP(-1:-4),SMSCG_OPSV,
                         30, 
                         99, calmonth, calyear, km_cnf_mod) ! 99 = COUNTBELOW, km_cnf is threshold
      }
      case StandardOff {
      	condition always
      	value 0.
      }
}


define X2_cnf_nday_proj {lower -999999 upper 999999 kind 'X2-NDAY' units 'DAYS'}
goal setX2NDaycnfproj {X2_cnf_nday_proj = X2_cnf_nday_proj_sv}




define km_cnf_prev_sv {
	value km_cnf_mod_(-1)
}

! report previous ndays value of x2 west of station
define X2_cnf_nday_prev_sv {
	case StandardWasOn{
		condition km_cnf_prev_sv > 0.5 .and. km_cnf_prev_sv < 110.
        value  surrogateX2(NDO(-2:-5),NDO(-1),
                         SMSCG_OP(-2:-5),SMSCG_OP(-1),
                         30, 
                         99, calmonth_prev, calyear_prev, km_cnf_prev_sv) ! 99 = COUNTBELOW, km_cnf is threshold

    }
    case StandardWasOff{
    	condition always
    	value 0.
    }
}

define X2_cnf_nday_prev {lower -999999 upper 999999 kind 'X2-NDAY' units 'DAYS'}
goal setX2NDaycnf {X2_cnf_nday_prev = X2_cnf_nday_prev_sv}

! R.Wilbur & S. Wu 5/10/05
/*

ARTIFICIAL NEURAL NETWORK IMPLEMENTATION - JERSEY POINT

Jersey Point salinity standard:
14-day running average EC may not exceed the standard for the periods listed below (mmhos):
water-year-type:    0.45 EC April 1 to:    Ec from date shown to Aug 15:
Wet                 Aug 15                 --
Above Normal        Aug 15                 --
Below Normal        Jun 20                 0.74
Dry                 Jun15                  1.35
Critical            --                     2.20

These standards are modified to account to the monthly time-step.
Modified values are derived from an exponential weighting function.
Modified values are in salinity_std_jpt_new.table.

*/

!****************************************************************************************



! calculate previous month's value of salinity
define JP_EC_Month_sv {
        value  surrogateEC(Sac_Tot(-2:-5),Sac_tot(-1),
               EXP_tot(-2:-5),Exp_tot(-1),
               DXC(-2:-5),DXC(-1),
               net_DICU(-2:-5),net_DICU(-1),
               C_SJR070(-2:-5),C_SJR070(-1),
               SMSCG_OP(-2:-5),SMSCG_OP(-1),
               int(JP), int(monthly_ave), calmonth_prev, calyear_prev)
}

define JP_EC_Month {lower -999999 upper 999999 kind 'SALINITY' units 'UMHOS/CM'}
goal setJPMonprv {JP_EC_Month = JP_EC_Month_sv}


!**************************************************************************************************
!get 14-day ANN_EC for 1 month earlier

define JP_EC_Max14Day_sv {
      value  surrogateEC(Sac_Tot(-2:-5),Sac_tot(-1),
               EXP_tot(-2:-5),Exp_tot(-1),
               DXC(-2:-5),DXC(-1),
               net_DICU(-2:-5),net_DICU(-1),
               C_SJR070(-2:-5),C_SJR070(-1),
               SMSCG_OP(-2:-5),SMSCG_OP(-1),
               int(JP),int(monthly_ave), calmonth_prev, calyear_prev)  !int(max_14day_running_ave)
}

define JP_EC_Max14Day {lower -999999 upper 999999 kind 'SALINITY' units 'UMHOS/CM'}
goal setJP14Dayprv {JP_EC_Max14Day = JP_EC_Max14Day_sv}


!****************************************************************************************

!define the EC standard for Jersey Point (millimhos/cm)  
define JP_EC_STD_lookup_orig {
  case Standard {
    condition  month >=Oct .and. month <=Jan .or. month >=APR .and. month <=Sep
    select  ECstandard
    from  salinity_std_jpt_new
    where  month=month,wyt_SAC=wyt_ann}
  case NoStandard {
    condition  always
    value  99.0} }
                                                           
define JP_EC_STD_lookup {                                     
  case tucp_adjust {
    condition tucp_trigger == 1
    value JP_EC_STD_lookup_orig*JP_wq_CritRelaxFac}     
  case Otherwise {
    condition  always
    value  JP_EC_STD_lookup_orig}                                                                              
}

define JP_EC_STD_sv {value JP_EC_STD_lookup*1000.0}
define JP_EC_STD {std kind 'SALINITY' units 'UMHOS/CM'}
goal JPECstandout {JP_EC_STD = JP_EC_STD_sv}


!************ ea: this is new, anticipates next standard
! define the EC standard
define JP_EC_STD_next_lookup_orig {      
  case NextIsAprToAug {
    condition  nextwatermonth >=Oct .and. nextwatermonth <=Jan .or. nextwatermonth >=APR .and. nextwatermonth <=Sep
    select            ECstandard
    from              salinity_std_jpt_new
    where             month=nextwatermonth,wyt_SAC=wyt_ann}
  case NoStandard {
    condition         always
    value             99.0}
}
define JP_EC_STD_next_lookup {      
    case   tucp_adjust {
       condition tucp_trigger == 1
       value JP_EC_STD_next_lookup_orig*JP_wq_CritRelaxFac}
    case Otherwise {
       condition   always
       value        JP_EC_STD_next_lookup_orig}
}

define JP_EC_std_next_sv {value JP_EC_STD_next_lookup*1000.0}
define JP_EC_std_next {std kind 'SALINITY' units 'UMHOS/CM'}
goal JPECNext {JP_EC_std_next = JP_EC_std_next_sv}







!****************************************************************************************
!get parameters for constraint

! linearization around these nominal values (later move to shared location)
define Sac_nominal{
  case controlfirstcycle{
    condition cyclenum == cn_GW_INITIAL
    value Sac_Tot(-1)
  }
  case control{
  	condition always
  	value Sac_Tot[-1]
  }
}
define Exp_nominal{
  case controlfirstcycle{
    condition cyclenum == cn_GW_INITIAL
    value Exp_Tot(-1)
  }
  case controlafterfirst{
  	condition always
  	value Exp_Tot[-1]
  }
}

! Todo: define HighFlow or find it elsewhere instead of hardwired 15000
define JP_a0_sv {
  case HighFlow{
  	condition (SAC_nominal - EXP_nominal > 15000) .and. (SAC_TOT(-1) - EXP_tot(-1) > 15000)
    value 0.0}	
  case control{ 
  	! Shut down for < 10000 because no genuine standard in this range                  
    condition (month >=Oct .and. month <=Jan .or. (month >=APR .and. month <=Sep)) .and. JP_EC_STD_sv < 10000.
    value  surrogateECLinearize(Sac_Tot(-1:-4), Sac_nominal,
                    EXP_tot(-1:-4), EXP_nominal,
                    C_SJR070(-1:-4), SJR_ann_est,
                    DXC(-1:-4), DXC_est,
                    net_DICU(-1:-4), net_delta_cu,
                    SMSCG_OP(-1:-4), SMSCG_OPSV,
                    JP_EC_std_sv, int(JP), 0, int(ann_type), calmonth, calyear)}
  case other {
    condition  always
    value 0.}
}

define JP_a1_sv {
  case HighFlow{
  	condition (SAC_nominal - EXP_nominal > 15000) .and. (SAC_TOT(-1) - EXP_tot(-1) > 15000)
    value -1.0}	
  case control{
    ! Shut down for < 10000 because no genuine standard in this range
    condition (month >=Oct .and. month <=Jan .or. (month >=APR .and. month <=Sep)) .and. JP_EC_STD_sv < 10000.
    value  surrogateECLinearize(Sac_Tot(-1:-4), Sac_nominal,
                    EXP_tot(-1:-4), Exp_nominal,
                    C_SJR070(-1:-4), SJR_ann_est,
                    DXC(-1:-4), DXC_est,
                    net_DICU(-1:-4), net_delta_cu,
                    SMSCG_OP(-1:-4), SMSCG_OPSV,
                    JP_EC_std_sv, int(JP), 1, int(ann_type), calmonth, calyear)}
  case other{
    condition  always
    value -1.}
}

define JP_a2_sv {
  case HighFlow{
  	condition (SAC_nominal - EXP_nominal > 15000) .and. (SAC_TOT(-1) - EXP_tot(-1) > 15000)
    value 1.0}	
  case control{
    condition (month >=Oct .and. month <=Jan .or. (month >=APR .and. month <=Sep)) .and. JP_EC_STD_sv < 10000.
    value  surrogateECLinearize(Sac_Tot(-1:-4), Sac_nominal,
                    EXP_tot(-1:-4), Exp_nominal,
                    C_SJR070(-1:-4), SJR_ann_est,
                    DXC(-1:-4), DXC_est,
                    net_DICU(-1:-4), net_delta_cu,
                    SMSCG_OP(-1:-4), SMSCG_OPSV,
                    JP_EC_std_sv, int(JP), 2, int(ann_type), calmonth, calyear)}
  case other {
    condition  always
    value 1.}
}

define JP_b_sv {	
	case noControl{
  		condition JP_a0_sv>=999999.
  		value 999999.
	}
	case negExpSensativity{  ! must precede lowExpSensativity
		condition JP_a2_sv < -0.0001
		value -JP_a0_sv/JP_a2_sv
	}	
	case lowExpSensitivity{
		condition JP_a2_sv < 0.0001
		value 0.
	}
	case control{            ! normal sensitivity where JP_a2_sv is positive
		condition always
		value JP_a0_sv/JP_a2_sv
	}
}




!********************* ea: This is new. Soft constraint on not being close to next months standard in final week of this month
define JP_a0f_sv {
  case HighFlow{
  	condition (SAC_nominal - EXP_nominal > 20000) .and. (SAC_TOT(-1) - EXP_tot(-1) > 20000)
    value 0.0}		
  case control{                  
    condition (nextwatermonth >=Oct .and. nextwatermonth <=Jan .or. (nextwatermonth >=APR .and. nextwatermonth <=Sep)) .and. JP_EC_STD_next_sv < 10000.
    value  surrogateECLinearize(Sac_Tot(-1:-4), Sac_nominal,
                    EXP_tot(-1:-4), EXP_nominal,
                    C_SJR070(-1:-4), SJR_ann_est,
                    DXC(-1:-4), DXC_est,
                    net_DICU(-1:-4), net_delta_cu,
                    SMSCG_OP(-1:-4), SMSCG_OPSV,
                    JP_EC_std_next_sv, int(JP), 0,  int(ave_last_7days), calmonth, calyear)}
  case other {
    condition  always
    value 0.}
}

define JP_a1f_sv {
  case HighFlow{
  	condition (SAC_nominal - EXP_nominal > 20000) .and. (SAC_TOT(-1) - EXP_tot(-1) > 20000)
    value -1.0}		
  case control{
    condition (nextwatermonth >=Oct .and. nextwatermonth <=Jan .or. (nextwatermonth >=APR .and. nextwatermonth <=Sep)) .and. JP_EC_STD_next_sv < 10000.
    value  surrogateECLinearize(Sac_Tot(-1:-4), Sac_nominal,
                    EXP_tot(-1:-4), Exp_nominal,
                    C_SJR070(-1:-4), SJR_ann_est,
                    DXC(-1:-4), DXC_est,
                    net_DICU(-1:-4), net_delta_cu,
                    SMSCG_OP(-1:-4), SMSCG_OPSV,
                    JP_EC_std_next_sv, int(JP), 1,  int(ave_last_7days), calmonth, calyear)}
  case other{
    condition  always
    value -1.}
}

define JP_a2f_sv {
  case HighFlow{
  	condition (SAC_nominal - EXP_nominal > 20000) .and. (SAC_TOT(-1) - EXP_tot(-1) > 20000)
    value 1.0}		
  case control{
    condition (nextwatermonth >=Oct .and. nextwatermonth <=Jan .or. (nextwatermonth >=APR .and. nextwatermonth <=Sep)) .and. JP_EC_STD_next_sv < 10000.
    value  surrogateECLinearize(Sac_Tot(-1:-4), Sac_nominal,
                    EXP_tot(-1:-4), Exp_nominal,
                    C_SJR070(-1:-4), SJR_ann_est,
                    DXC(-1:-4), DXC_est,
                    net_DICU(-1:-4), net_delta_cu,
                    SMSCG_OP(-1:-4), SMSCG_OPSV,
                    JP_EC_std_next_sv, int(JP), 2, int(ave_last_7days), calmonth, calyear)}
  case other {
    condition  always
    value 1.}
}
! *********************************


define JP_m_sv {
  case noControl {
    condition  JP_b_sv >= 999990.
    value 0.}
   case negExpSensitivity{
    condition JP_a2_sv < -0.0001 .and. (month >=Oct .and. month <=Jan .or. month >=APR .and. month <=Sep)
	Value JP_a1_sv/JP_a2_sv
	}    
   case lowExpSensitivity{
    condition JP_a2_sv < 0.0001 .and. (month >=Oct .and. month <=Jan .or. month >=APR .and. month <=Sep)
	Value 1.
	}    
  case control{
    condition month >=Oct .and. month <=Jan .or. month >=APR .and. month <=Sep
    value -JP_a1_sv/JP_a2_sv}
  
  case other {
    condition  always
    value 0.}
}

define JP_a0 {lower unbounded upper unbounded kind 'constraint' units 'UMHOS/CM'}
define JP_a1 {lower unbounded upper unbounded kind 'constraint' units 'UMHOS/CM'}
define JP_a2 {lower unbounded upper unbounded kind 'constraint' units 'UMHOS/CM'}
goal setJPa0 {JP_a0 = JP_a0_sv}
goal setJPa1 {JP_a1 = JP_a1_sv}
goal setJPa2 {JP_a2 = JP_a2_sv}

define JP_m {lower unbounded upper unbounded kind 'SLOPE' units 'NONE'}
define JP_b {lower unbounded upper unbounded kind 'INTERCEPT' units 'NONE'}
goal setJP_m {JP_m = JP_m_sv}
goal setJP_b {JP_b = JP_b_sv}
!!!!!!!!!!!!
define JP_Sac_zeroExp_sv2 {
  case control{
    condition month >=Oct .and. month <=Jan .or. month >= Apr .and. month <= Sep
        ! The zero after Exp_tot(-1:-4) is the zero exports for the current month
    	value max(0., requiredFlow(JP_EC_std_sv, Sac_Tot(-1:-4), -9999., EXP_tot(-1:-4), 0., 
		              C_SJR070(-1:-4), SJR_ann_est, 
		              DXC(-1:-4), DXC_est, net_DICU(-1:-4), net_delta_cu, 
		              SMSCG_OP(-1:-4), SMSCG_OPSV, 
		              5000., 24000., int(JP), int(ann_type), calmonth, calyear))
		       }
  ! todo: review special cases, 5000/2400 brackets and necessity of the max(0., part
  case other {
  	condition always
  	value 0.0}
}
define JP_Sac_ZeroExp {lower unbounded upper unbounded kind 'FLOW' units 'CFS'}
goal setJP_Sac_ZeroExp {JP_Sac_ZeroExp = JP_Sac_ZeroExp_sv2}



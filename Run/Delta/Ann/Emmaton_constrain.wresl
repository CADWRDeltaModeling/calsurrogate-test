
goal meetEM {
  lhs EM_a1_sv*C_SACtot_ANN + EM_a2_sv*(EXP_TD + D408_P)  ! EXP_TD + D408_P
  case ControlSeason {
    condition (month >= Apr .and. month <= Sep) .and. EM_EC_STD_sv<10000. 
    rhs EM_a0_sv
    lhs<rhs penalty 0}
  case NonControlSeason {
    condition always
    rhs 99999999. 
    lhs<rhs penalty 0.
    lhs>rhs penalty 0.}
}


define EM_EC_slack {std kind 'SALINITY' units 'UMHOS/CM'}
goal set_EM_EC_slack { 
		EM_EC_slack = EM_a0_sv - EM_a1_sv*C_SACtot_ANN - EM_a2_sv*(EXP_TD + D408_P)
}



! **** ea: this is new, and is an effort to help with oscillation by placing a soft constraint 
! encouraging early compliance with next month's standard in the final week of this period. Since
! the objectives are based on running averages this is consistent in spirit with what will be required on
! the first of the month 
goal anticipateEM {
  lhs EM_a1f_sv*C_SACtot_ANN + EM_a2f_sv*(EXP_TD + D408_P)  ! EXP_TD + D408_P
  case ControlTightening {
	condition (nextwatermonth >= Apr .and. nextwatermonth <= Aug) .and. EM_EC_STD_next_sv<10000. 
    rhs EM_a0f_sv
    lhs<rhs penalty 0.
    lhs>rhs penalty 8000. }
  case NonControlSeason {
    condition always
    rhs 99999999. 
    lhs<rhs penalty 0.
    lhs>rhs penalty 0.}
}

/* Prior constraint
goal meetEM {
  lhs EXP_TD + D408_P
  case NoSalinityControlPossible{
    condition abs(EM_m_sv) <= 0.001 .and. int(EM_b_sv) == 0
    rhs ExportCap
    lhs<rhs penalty 0}
  case NoExpSensitivity{
    condition EM_m_sv == 1.0 .and. EM_b_sv == 0
    rhs ExportCap
    lhs<rhs penalty 0}    
  case NegSlope{
    condition EM_m_sv <= 0.0
    rhs 999999.
    lhs<rhs penalty 0}
  /*case HighCost{
    condition EM_Sac_ZeroExp_sv2 >= ANNcap
    rhs ExportCap
    lhs<rhs penalty 0}*/
  /*case NegCarriage{
    condition EM_m_sv >= 1.0
    rhs 999999.
    lhs<rhs penalty 0}*/  /*
  case Normal {
    condition always
    rhs EM_m_sv*C_SACtot_ANN + EM_b_sv
    lhs<rhs penalty 0}
}
*/

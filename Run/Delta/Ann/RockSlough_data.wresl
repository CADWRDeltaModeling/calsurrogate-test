/*
    ARTIFICIAL NEURAL NETWORK IMPLEMENTATION - CONTRA COSTA-ROCK SLOUGH CORRELATION
*/

! calculate previous month's value of salinity
define RS_EC_Month_sv {
      value  surrogateEC(Sac_Tot(-2:-5),Sac_tot(-1),
               EXP_tot(-2:-5),Exp_tot(-1),
               DXC(-2:-5),DXC(-1),
               net_DICU(-2:-5),net_DICU(-1),
               C_SJR070(-2:-5),C_SJR070(-1),
               SMSCG_OP(-2:-5),SMSCG_OP(-1),
               int(BI), int(monthly_ave), calmonth_prev, calyear_prev)
}

define RS_EC_Month {lower -999999 upper 999999 kind 'SALINITY' units 'UMHOS/CM'}
goal setRSMonprv {RS_EC_Month = RS_EC_Month_sv}


!**************************************************************************************************
!get 14-day EC for 1 month earlier
define RS_EC_Max14Day_sv {
      value  surrogateEC(Sac_Tot(-2:-5),Sac_tot(-1),
               EXP_tot(-2:-5),Exp_tot(-1),
               DXC(-2:-5),DXC(-1),
               net_DICU(-2:-5),net_DICU(-1),
               C_SJR070(-2:-5),C_SJR070(-1),
               SMSCG_OP(-2:-5),SMSCG_OP(-1),
               int(BI),int(monthly_ave), calmonth_prev, calyear_prev)  !int(max_14day_running_ave)
}

define RS_EC_Max14Day {std kind 'SALINITY' units 'UMHOS/CM'}
goal setRS_EC_14Ave {RS_EC_Max14Day = RS_EC_Max14Day_sv}

! This is DWR's equation used previously
!define RS_CL_Max14Day_sv {value 0.268*RS_EC_Max14Day_sv - 23.6}

! This is CCWD's first approximation (Matt Moses, July 2006)
! Use Maximum of the following two equations:
!   Cl = 0.285*EC - 50    (this is the 'seawater' line)
!   Cl = 0.15*EC - 12      (this is the 'ag. drainage' line)
! These two equations intercept at Cl=30.222... and EC=281.481481481...
define RS_CL_Max14Day_sv {value max(0.285*RS_EC_Max14Day_sv - 50.,
                                    0.150*RS_EC_Max14Day_sv - 12.,0.0)}

define RS_CL_Max14Day {std kind 'SALINITY' units 'MG/L'}
goal setRS_CL_Max14Day {RS_CL_Max14Day = RS_CL_Max14Day_sv}

! Additional equations for Banks and Tracy PP water qualities
! Compute salinity Tracy and Banks (Source: P. Hutton/C. Wang FDM analysis)
define BanksEC_Max14Day {std kind 'SALINITY-APPROX' units 'UMHOS/CM'}
define BanksEC_Max14Day_sv {value RS_CL_Max14Day_sv * 1.9818 + 218.1084}  ! This equation reflects WQ at Banks
goal setBanksEC_Max14Day {BanksEC_Max14Day = BanksEC_Max14Day_sv}

define TracyEC_Max14Day {std kind 'SALINITY-APPROX' units 'UMHOS/CM'}
define TracyEC_Max14Day_sv {value RS_CL_Max14Day_sv * 1.6225 + 303.3852} ! ! This equation reflects WQ at Tracy
goal setTracyEC_Max14Day {TracyEC_Max14Day = TracyEC_Max14Day_sv}

!****************************************************************************************

! define the CL standard for Contra Costa Canal
define RS_CL_STD_sv {select CLstandard1
                     from   salinity_std_rsl
                     where  month=month,wyt=wyt_ann}
define RS_CL_STD {std kind 'SALINITY' units 'MG/L'}
goal setRS_CL_STD {RS_CL_STD = RS_CL_STD_sv}

! This is DWR's equation used previously
!define RS_EC_STD_sv {value (RS_CL_STD_sv + 23.6)/0.268 }

! This is CCWD's first approximation (Matt Moses, July 2006)
! Use Maximum of the following two equations:
!   Cl = 0.285*EC - 50    (this is the 'seawater' line)
!   Cl = 0.15*EC - 12      (this is the 'ag. drainage' line)
! These two equations intercept at Cl=30.222... and EC=281.481481481...
define RS_EC_STD_sv {
    case low {
    condition RS_CL_STD_sv <= 30.222
    value (RS_CL_STD_sv + 12)/0.15}
    case high {
    condition always
    value (RS_CL_STD_sv + 50)/0.285}
}

define RS_EC_STD {std kind 'SALINITY' units 'UMHOS/CM'}
goal setRS_EC_STD {RS_EC_STD = RS_EC_STD_sv}

!sometimes used for #2&3 if #1 is infeasible (always try to meet the 225 mg/l std)
! This is DWR's equation used previously
!define RS_EC_STD_225 {value (225. + 23.6)/0.268}
! This is CCWD's first approximation (Matt Moses, July 2006) - see notes above
define RS_EC_STD_225 {value (225. + 50)/0.285}

!*************************************************************************************************************
!**************   Local Linearization   *****************************
!*************************************************************************************************************

! This is really different (and much more simple than) older linegen linearizations
! but you can see some remnants of the old "three global lines" method



define RS_a0_sv {
  case HighFlow{
  	condition (SAC_nominal - EXP_nominal > 20000) .and. (SAC_TOT(-1) - EXP_tot(-1) > 16000)
    value 0.0
  }
  case control{
  condition always
    value  surrogateECLinearize(Sac_Tot(-1:-4), Sac_nominal,
                    EXP_tot(-1:-4), EXP_nominal,
                    C_SJR070(-1:-4), SJR_ann_est,
                    DXC(-1:-4), DXC_est,
                    net_DICU(-1:-4), net_delta_cu,
                    SMSCG_OP(-1:-4), SMSCG_OPSV,
                    RS_EC_std_sv, int(BI), 0, int(ann_type), calmonth, calyear)}
}

define RS_a1_sv {
  case HighFlow{
  	condition (SAC_nominal - EXP_nominal > 20000) .and. (SAC_TOT(-1) - EXP_tot(-1) > 16000)
    value -1.0
  }
  case control{
    condition month >= Apr .and. month <= Aug 
    value  surrogateECLinearize(Sac_Tot(-1:-4), Sac_nominal,
                    EXP_tot(-1:-4), Exp_nominal,
                    C_SJR070(-1:-4), SJR_ann_est,
                    DXC(-1:-4), DXC_est,
                    net_DICU(-1:-4), net_delta_cu,
                    SMSCG_OP(-1:-4), SMSCG_OPSV,
                    RS_EC_std_sv, int(BI), 1, int(ann_type), calmonth, calyear)}
  case other{
    condition  always
    value -1.}
}

define RS_a2_sv {
  case HighFlow{
  	condition (SAC_nominal - EXP_nominal > 20000) .and. (SAC_TOT(-1) - EXP_tot(-1) > 16000)
    value 1.0
  }
  case control{
  	condition always
    value  surrogateECLinearize(Sac_Tot(-1:-4), Sac_nominal,
                    EXP_tot(-1:-4), Exp_nominal,
                    C_SJR070(-1:-4), SJR_ann_est,
                    DXC(-1:-4), DXC_est,
                    net_DICU(-1:-4), net_delta_cu,
                    SMSCG_OP(-1:-4), SMSCG_OPSV,
                    RS_EC_std_sv, int(BI), 2, int(ann_type), calmonth, calyear)}
  case other {
    condition  always
    value 1.}
}

define RS_b_1_sv {
	case noControl{
  		condition RS_a0_sv>=999999.
  		value 999999.
	}
	case noExpSensitivity{
		condition RS_a2_sv < 0.000001
		value 0.
	}
	case control{
		condition always
		value RS_a0_sv/RS_a2_sv
	}
}

define RS_m_1_sv {
  case reducecalls {
    condition  RS_b_1_sv >= 999990.
    value 0.}
   case noExpSensitivity{
    condition RS_a2_sv < 0.000001
	Value 1.
	}    
  case control{
    condition month >= Apr .and. month <= Aug
    value -RS_a1_sv/RS_a2_sv}
  
  case other {
    condition  always
    value 0.}
}

define RS_a0 {lower unbounded upper unbounded kind 'constraint' units 'UMHOS/CM'}
define RS_a1 {lower unbounded upper unbounded kind 'constraint' units 'UMHOS/CM'}
define RS_a2 {lower unbounded upper unbounded kind 'constraint' units 'UMHOS/CM'}
goal setRSa0 {RS_a0 = RS_a0_sv}
goal setRSa1 {RS_a1 = RS_a1_sv}
goal setRSa2 {RS_a2 = RS_a2_sv}

define RS_m {lower unbounded upper unbounded kind 'SLOPE' units 'NONE'}
define RS_b {lower unbounded upper unbounded kind 'INTERCEPT' units 'NONE'}
goal setRS_m {RS_m = RS_m_1_sv}
goal setRS_b {RS_b = RS_b_1_sv}

/* These are defined all the same way around the inverted slope and intercept
   to make older CalSim wresl happy at the moment. Eventually should be eliminated as
   the propagation of 3 different linearizations is very messy */
define RS_m_1 {lower unbounded upper unbounded kind 'SLOPE' units 'NONE'}
define RS_b_1 {lower unbounded upper unbounded kind 'INTERCEPT' units 'NONE'}
goal setRS_m_1 {RS_m_1 = RS_m_1_sv}
goal setRS_b_1 {RS_b_1 = RS_b_1_sv}

define RS_m_2 {lower unbounded upper unbounded kind 'SLOPE' units 'NONE'}
define RS_b_2 {lower unbounded upper unbounded kind 'INTERCEPT' units 'NONE'}
goal setRS_m_2 {RS_m_2 = RS_m_1_sv}
goal setRS_b_2 {RS_b_2 = RS_b_1_sv}

define RS_m_3 {lower unbounded upper unbounded kind 'SLOPE' units 'NONE'}
define RS_b_3 {lower unbounded upper unbounded kind 'INTERCEPT' units 'NONE'}
goal setRS_m_3 {RS_m_3 = RS_m_1_sv}
goal setRS_b_3 {RS_b_3 = RS_b_1_sv}


!********************************************************************

define  RS_Sac_ZeroExp_sv2 {
  case LowCL{
    condition C_SAC041_ANN(-1) >= 30000.
    value 0.}
  ! todo: review special cases and the thresholds 5000 and 24000.
  case other{
    condition always
    	value max(0.,requiredFlow(RS_EC_std_sv, Sac_Tot(-1:-4), -9999., EXP_tot(-1:-4), 0., 
		              C_SJR070(-1:-4), SJR_ann_est, 
		              DXC(-1:-4), DXC_est, net_DICU(-1:-4), net_delta_cu, 
		              SMSCG_OP(-1:-4), SMSCG_OPSV, 
		              5000., 24000., int(BI), int(ann_type), calmonth, calyear))
		     }
}
define RS_Sac_ZeroExp {lower unbounded upper unbounded kind 'FLOW' units 'CFS'}
goal setRS_Sac_ZeroExp {RS_Sac_ZeroExp = RS_Sac_ZeroExp_sv2}



